---
// Demo component showing visualizer colors in real-time
// Add this to any page to see the colors being broadcast
---

<div id="color-demo" class="color-demo">
	<div class="color-preview" id="color-preview"></div>
	<div class="color-info">
		<div id="hex-value">#000000</div>
		<div id="audio-levels">
			<div>Bass: <span id="bass-level">0</span></div>
			<div>Mid: <span id="mid-level">0</span></div>
			<div>High: <span id="high-level">0</span></div>
		</div>
	</div>
</div>

<style>
	.color-demo {
		position: fixed;
		bottom: 100px;
		right: 20px;
		z-index: 100;
		background: rgba(0, 0, 0, 0.8);
		backdrop-filter: blur(10px);
		border-radius: 12px;
		padding: 16px;
		display: flex;
		gap: 12px;
		align-items: center;
		font-family: monospace;
		font-size: 12px;
		color: white;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
		transition: all 0.1s ease-out;
	}

	.color-preview {
		width: 60px;
		height: 60px;
		border-radius: 8px;
		background: #000;
		border: 2px solid rgba(255, 255, 255, 0.2);
		transition: all 0.1s ease-out;
	}

	.color-info {
		display: flex;
		flex-direction: column;
		gap: 8px;
	}

	#hex-value {
		font-size: 14px;
		font-weight: bold;
		letter-spacing: 0.5px;
	}

	#audio-levels {
		display: flex;
		flex-direction: column;
		gap: 4px;
		font-size: 10px;
		opacity: 0.7;
	}

	#audio-levels span {
		display: inline-block;
		width: 30px;
		text-align: right;
		font-weight: bold;
	}

	@media (max-width: 640px) {
		.color-demo {
			bottom: 80px;
			right: 10px;
			padding: 12px;
			font-size: 10px;
		}

		.color-preview {
			width: 40px;
			height: 40px;
		}

		#hex-value {
			font-size: 12px;
		}
	}
</style>

<script>
	const preview = document.getElementById("color-preview");
	const hexValue = document.getElementById("hex-value");
	const bassLevel = document.getElementById("bass-level");
	const midLevel = document.getElementById("mid-level");
	const highLevel = document.getElementById("high-level");

	document.addEventListener("visualizer-colors", ((event: CustomEvent) => {
		const { hex, rgb, audioLevels } = event.detail;

		if (preview) {
			preview.style.backgroundColor = hex;
			// Add glow effect based on audio intensity
			const glowSize = audioLevels.intensity * 20;
			preview.style.boxShadow = `
        0 0 ${glowSize}px ${glowSize / 2}px rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.6),
        inset 0 0 ${glowSize / 2}px rgba(255, 255, 255, ${audioLevels.intensity * 0.5})
      `;
		}

		if (hexValue) {
			hexValue.textContent = hex.toUpperCase();
			hexValue.style.color = hex;
		}

		if (bassLevel) {
			bassLevel.textContent = audioLevels.bass.toFixed(2);
		}

		if (midLevel) {
			midLevel.textContent = audioLevels.mid.toFixed(2);
		}

		if (highLevel) {
			highLevel.textContent = audioLevels.high.toFixed(2);
		}
	}) as EventListener);
</script>
