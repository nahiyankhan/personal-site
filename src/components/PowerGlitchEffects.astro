---
// PowerGlitch Effects Component - Adds retro glitch effects
---

<script>
	import { PowerGlitch } from "powerglitch";

	// Track active glitches for cleanup
	const activeGlitches = new Map();

	function initPowerGlitch() {
		console.log("⚡ Initializing PowerGlitch effects...");

		// Apply auto-glitch effect to elements marked with data-vfx-auto (always on)
		const autoGlitchElements = document.querySelectorAll(
			"[data-vfx-auto]"
		) as NodeListOf<HTMLElement>;

		console.log(`🎬 Found ${autoGlitchElements.length} elements with data-vfx-auto`);

		autoGlitchElements.forEach((el) => {
			const glitchInstance = PowerGlitch.glitch(el, {
				playMode: "always",
				createContainers: true,
				hideOverflow: false,
				timing: {
					duration: 3000,
					iterations: Infinity,
				},
				glitchTimeSpan: {
					start: 0.3,
					end: 0.5,
				},
				shake: {
					velocity: 10,
					amplitudeX: 0.05,
					amplitudeY: 0,
				},
				slice: {
					count: 6,
					velocity: 12,
					minHeight: 0.02,
					maxHeight: 0.1,
					hueRotate: true,
				},
			});
			activeGlitches.set(el, glitchInstance);
			console.log("✅ Auto PowerGlitch applied to:", el);
		});

		// Apply glitch effect to elements marked with data-vfx-glitch on hover
		const glitchElements = document.querySelectorAll(
			"[data-vfx-glitch]"
		) as NodeListOf<HTMLElement>;

		console.log(`✨ Found ${glitchElements.length} elements with data-vfx-glitch`);

		glitchElements.forEach((el) => {
			const applyGlitch = () => {
				if (!activeGlitches.has(el)) {
					const glitchInstance = PowerGlitch.glitch(el, {
						playMode: "always",
						createContainers: true,
						hideOverflow: false,
						timing: {
							duration: 2000,
							iterations: Infinity,
						},
						glitchTimeSpan: {
							start: 0.5,
							end: 0.7,
						},
						shake: {
							velocity: 15,
							amplitudeX: 0.2,
							amplitudeY: 0.2,
						},
						slice: {
							count: 6,
							velocity: 15,
							minHeight: 0.02,
							maxHeight: 0.15,
							hueRotate: true,
						},
					});
					activeGlitches.set(el, glitchInstance);
					console.log("✅ PowerGlitch applied to:", el);
				}
			};

			const removeGlitch = () => {
				const glitchInstance = activeGlitches.get(el);
				if (glitchInstance) {
					glitchInstance.stopGlitch();
					activeGlitches.delete(el);
					console.log("🛑 PowerGlitch removed from:", el);
				}
			};

			el.addEventListener("mouseenter", applyGlitch);
			el.addEventListener("mouseleave", removeGlitch);
		});

		// Apply hover effects to images marked with data-vfx-hover
		const hoverElements = document.querySelectorAll("[data-vfx-hover]") as NodeListOf<HTMLElement>;

		console.log(`🖼️  Found ${hoverElements.length} elements with data-vfx-hover`);

		hoverElements.forEach((el) => {
			const applyEffect = () => {
				if (!activeGlitches.has(el)) {
					const glitchInstance = PowerGlitch.glitch(el, {
						playMode: "always",
						createContainers: true,
						hideOverflow: false,
						timing: {
							duration: 1000,
							iterations: Infinity,
						},
						glitchTimeSpan: {
							start: 0.4,
							end: 0.6,
						},
						shake: {
							velocity: 10,
							amplitudeX: 0.1,
							amplitudeY: 0.1,
						},
						slice: {
							count: 8,
							velocity: 10,
							minHeight: 0.02,
							maxHeight: 0.1,
							hueRotate: true,
						},
					});
					activeGlitches.set(el, glitchInstance);
				}
			};

			const removeEffect = () => {
				const glitchInstance = activeGlitches.get(el);
				if (glitchInstance) {
					glitchInstance.stopGlitch();
					activeGlitches.delete(el);
				}
			};

			el.addEventListener("mouseenter", applyEffect);
			el.addEventListener("mouseleave", removeEffect);
		});

		// Cleanup on navigation
		document.addEventListener("astro:before-preparation", () => {
			activeGlitches.forEach((glitchInstance) => {
				try {
					glitchInstance.stopGlitch();
				} catch (error) {
					// Ignore cleanup errors
				}
			});
			activeGlitches.clear();
		});

		console.log("⚡ PowerGlitch initialization complete!");
	}

	// Run on initial page load
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", initPowerGlitch);
	} else {
		// DOM already loaded
		initPowerGlitch();
	}

	// Also run on Astro page transitions
	document.addEventListener("astro:page-load", initPowerGlitch);
</script>

<style>
	/* PowerGlitch requires elements to have position context */
	:global([data-vfx-hover]),
	:global([data-vfx-glitch]),
	:global([data-vfx-auto]) {
		position: relative;
		display: inline-block;
	}

	/* Smooth transitions for interactive elements */
	:global([data-vfx-hover]:hover),
	:global([data-vfx-glitch]:hover) {
		cursor: pointer;
	}

	/* Enhanced chromatic aberration for auto-glitch elements */
	:global([data-vfx-auto]) {
		filter: drop-shadow(2px 0 0 rgba(255, 0, 0, 0.5)) drop-shadow(-2px 0 0 rgba(0, 255, 255, 0.5));
	}
</style>
